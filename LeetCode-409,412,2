class Solution {
/*
409.最长回文串
给定一个包含大写字母和小写字母的字符串 s ，返回 通过这些字母构造成的 最长的回文串 。
在构造过程中，请注意 区分大小写 。比如 "Aa" 不能当做一个回文字符串。
*/
  public int longestPalindrome(String s) {
    int ans = 0;
    int[] count = new int[128];
    for(int i = 0; i < s.length(); i++) {
      char c = s.charAt(i);
      count[c]++;
    }
    for(int v : count) {
      ans += v / 2 * 2;
      if(v % 2 == 1 && ans % 2 == 0) {
        ans++;
      }
    }
    return ans;
  }
/*
412.FizzBuzz
给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：
answer[i] == "FizzBuzz" 如果 i 同时是 3 和 5 的倍数。
answer[i] == "Fizz" 如果 i 是 3 的倍数。
answer[i] == "Buzz" 如果 i 是 5 的倍数。
answer[i] == i （以字符串形式）如果上述条件全不满足。
*/
  public List<String> fizzBuzz(int n) {
    List<String> list = new ArrayList<>();
    for(int i = 1; i <= n; i++) {
      if(i % 5 == 0 && i % 3 == 0) {
        list.add("FizzBuzz");
      } else if(i % 3 == 0) {
          list.add("Fizz");
      } else if(i % 5 == 0) {
          list.add("Buzz");
      } else {
          list.add(i + "");
      }
    }
    return list;
  }
/*
2.两数相加
给你两个 非空 的链表，表示两个非负的整数。它们每位数字都是按照 逆序 的方式存储的，并且每个节点只能存储 一位 数字。
请你将两个数相加，并以相同形式返回一个表示和的链表。
你可以假设除了数字 0 之外，这两个数都不会以 0 开头
*/
  public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
    ListNode pre  = new ListNode(0);
    ListNode cur = pre;
    int carry = 0;
    while(l1 != null || l2 != null) {
      int x = l1 == null ? 0 : l1.val;
      int y = l2 == null ? 0 : l2.val;
      int sum = x + y + carry;
      carry = sum / 10;
      sum = sum % 10;
      cur.next = new ListNode(sum);
      cur = cur.next;
      if(l1 != null) {
        l1 = l1.next;
      }
      if(l2 != null) {
        l2 = l2.next;
      }
    }
    if(carry == 1) {
      cur.next = new ListNode(carry);
    }
    return pre.next;
  }
}
